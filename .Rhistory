metab <- incommon$metab
#get one gene an metabolite
gene_data = gene[geneOfInterest,]
metab_data = metab[metaboliteOfInterest,]
print("!")
#Add gene, phenotype and metabolite data for glm
forglm = NULL
forglm <- data.frame(row.names = 1:length(gene_data))
forglm$g = gene_data
forglm$type = as.numeric(as.character(pheno))
forglm$Y = as.numeric(metab_data)
form = "Y ~ g + type + g:type"
print("!")
if (!is.null(covariates)) {
#Add all covariates to formula for glm()
length_covar <- length(covariates)
for (i in 1:length_covar) {
form <- paste(form, '+', covariates[i])
}
#Add all covariates to dataframe for glm()
i=3
for(each in covariates){
names = colnames(forglm)
i = i+1
forglm[,i] = incommon$covar_matrix[,each]
colnames(forglm) = c(names, each)
}
}
print("!")
model = lm(formula = form, data = forglm)
p = list(type=seq(min(forglm$type),max(forglm$type),by=0.1))
margins_output=margins(model,at=p)
cplot(model, "type", what = "prediction", main = "Marginal effects")
return_value = list(model, margins_output)
names(return_value) = c("model", "margins")
return(return_value)
}
margins1 = MarginalEffectsGraph(inputResults = result_IntLIM, inputData = inputData, geneOfInterest="117_at", metaboliteOfInterest="Indoxyl")
document()
build()
install()
csvfile <- "/Users/liz/COPDOmics/filesForIntLim/HILICinputData.csv"
inputData <- IntLIM::ReadData(inputFile = csvfile,metabid='id',geneid='id')
result_IntLIM <- RunIntLim(inputData = inputData,stype="FEV1FEC", continuous = TRUE, covar=c("PC1", "PC2"), class.covar=c("numeric","numeric"))
margins1 = MarginalEffectsGraph(inputResults = result_IntLIM, inputData = inputData, geneOfInterest="117_at", metaboliteOfInterest="Indoxyl")
reload("IntLIM")
reload()
margins1 = MarginalEffectsGraph(inputResults = result_IntLIM, inputData = inputData, geneOfInterest="117_at", metaboliteOfInterest="Indoxyl")
setwd("/Users/liz/Documents/biomedicalInformatics/IntLM/IntLIM")
document()
build()
install()
/Users/liz/Documents/biomedicalInformatics/IntLM/IntLIM
margins1 = MarginalEffectsGraph(inputResults = result_IntLIM, inputData = inputData, geneOfInterest="117_at", metaboliteOfInterest="Indoxyl")
pwd()
getwd()
inputResults = result_IntLIM
document()
build()
install()
getwd()
margins1 = MarginalEffectsGraph(inputResults = result_IntLIM, inputData = inputData, geneOfInterest="117_at", metaboliteOfInterest="Indoxyl")
inputResults = result_IntLIM
inputData = inputData
geneOfInterest="117_at"
metaboliteOfInterest="Indoxyl"
#get covariates
covariates = as.character(inputResults@covar$covariate)
covariates_class = as.character(inputResults@covar$class.var)
#get dataframes
incommon <- getCommon(inputData,inputResults@stype,covar=covariates,class.covar=covariates_class)
pheno <- incommon$p
gene <- incommon$gene
metab <- incommon$metab
#get one gene an metabolite
gene_data = gene[geneOfInterest,]
metab_data = metab[metaboliteOfInterest,]
#Add gene, phenotype and metabolite data for glm
forglm = NULL
forglm <- data.frame(row.names = 1:length(gene_data))
forglm$g = gene_data
forglm$type = as.numeric(as.character(pheno))
forglm$Y = as.numeric(metab_data)
form = "Y ~ g + type + g:type"
if (!is.null(covariates)) {
#Add all covariates to formula for glm()
length_covar <- length(covariates)
for (i in 1:length_covar) {
form <- paste(form, '+', covariates[i])
}
#Add all covariates to dataframe for glm()
i=3
for(each in covariates){
names = colnames(forglm)
i = i+1
forglm[,i] = incommon$covar_matrix[,each]
colnames(forglm) = c(names, each)
}
}
model = lm(formula = form, data = forglm)
p = list(type=seq(min(forglm$type),max(forglm$type),by=0.1))
margins_output=margins(model,at=p)
cplot(model, "type", what = "prediction", main = "Marginal effects")
return_value = list(model, margins_output)
names(return_value) = c("model", "margins")
getCommon <- function(inputData,stype=NULL, covar = NULL, class.covar = NULL) {
incommon<-MultiDataSet::commonSamples(inputData)
mp <- Biobase::pData(incommon[["metabolite"]])
gp <- Biobase::pData(incommon[["expression"]])
if(all.equal(mp[,stype],gp[,stype])[1] != TRUE) {
stop(paste("The column", stype,"for the samples in common between the metabolite and gene datasets are not equal.  Please check your input."))
}
gene <- Biobase::assayDataElement(inputData[["expression"]], 'exprs')
metab <- Biobase::assayDataElement(inputData[["metabolite"]], 'metabData')
# Force the order to be the same, in case it isn't
p <- mp[rownames(gp),]
p.0 <- p
metab <- metab[,colnames(gene)]
if(!is.null(stype)) {
p <- p[,stype]
uniqp <- unique(p)
uniqtypes <- unique(p)
# Deal with missing values or ""
if(length(which(p==""))>0) {
new.p <- p[which(p!="")]
metab <- metab[,which(p!="")]
gene <- gene[,which(p!="")]
p <- new.p
}
if(length(which(is.na(p)))>0) {
new.p <- p[which(!is.na(p))]
metab <- metab[,which(!is.na(p))]
gene <- gene[,which(!is.na(p))]
p <- new.p
}
}
if(!is.null(covar)){
if (length(covar %in% colnames(p.0)) != sum(covar %in% colnames(p.0))){
stop("Additional variable names not in pData")
}
covar_matrix <- p.0[colnames(gene),covar, drop = FALSE]
na.covar <- which(is.na(covar_matrix) | covar_matrix == '',arr.ind = TRUE)
na.covar.list <- unique(rownames(na.covar))
new.overall.list <- setdiff(colnames(gene), na.covar.list)
covar_matrix <- covar_matrix[new.overall.list,,drop = FALSE]
class.var <- apply(covar_matrix,2,class)
gene <- gene[,new.overall.list]
metab <- metab[,new.overall.list]
p <- p.0[new.overall.list,stype]
if(!(is.null(class.covar))){
if(length(class.covar) != length(covar)){
stop("lengths of covar and class.covar not the same")
}
len.covar <- length(covar)
for(i in 1:len.covar){
if(class.covar[i] == 'numeric'){
covar_matrix[,i] <- as.numeric(covar_matrix[,i])
}else{
covar_matrix[,i] <- as.factor(as.character(covar_matrix[,i]))
}
}
}
}else{
covar_matrix <- NULL
}
# Check that everything is in right order
if(!all.equal(rownames(mp),rownames(gp)) || !all.equal(colnames(metab),colnames(gene))){
stop("Something went wrong with the merging!  Sample names of input files may not match.")
} else {
out <- list(p=as.factor(as.character(p)),gene=gene,metab=metab, covar_matrix=covar_matrix)
}
return(out)
}
#get covariates
covariates = as.character(inputResults@covar$covariate)
covariates_class = as.character(inputResults@covar$class.var)
#get dataframes
incommon <- getCommon(inputData,inputResults@stype,covar=covariates,class.covar=covariates_class)
pheno <- incommon$p
gene <- incommon$gene
metab <- incommon$metab
#get one gene an metabolite
gene_data = gene[geneOfInterest,]
metab_data = metab[metaboliteOfInterest,]
#Add gene, phenotype and metabolite data for glm
forglm = NULL
forglm <- data.frame(row.names = 1:length(gene_data))
forglm$g = gene_data
forglm$type = as.numeric(as.character(pheno))
forglm$Y = as.numeric(metab_data)
form = "Y ~ g + type + g:type"
if (!is.null(covariates)) {
#Add all covariates to formula for glm()
length_covar <- length(covariates)
for (i in 1:length_covar) {
form <- paste(form, '+', covariates[i])
}
#Add all covariates to dataframe for glm()
i=3
for(each in covariates){
names = colnames(forglm)
i = i+1
forglm[,i] = incommon$covar_matrix[,each]
colnames(forglm) = c(names, each)
}
}
model = lm(formula = form, data = forglm)
p = list(type=seq(min(forglm$type),max(forglm$type),by=0.1))
margins_output=margins(model,at=p)
cplot(model, "type", what = "prediction", main = "Marginal effects")
return_value = list(model, margins_output)
names(return_value) = c("model", "margins")
build()
install()
margins1 = MarginalEffectsGraph(inputResults = result_IntLIM, inputData = inputData, geneOfInterest="117_at", metaboliteOfInterest="Indoxyl")
margins1 = MarginalEffectsGraph(inputResults = result_IntLIM, inputData = inputData, geneOfInterest="117_at", metaboliteOfInterest="Indoxyl")
margins1 = MarginalEffectsGraph(inputResults = result_IntLIM, inputData = inputData, geneOfInterest="117_at", metaboliteOfInterest="Indoxyl")
csvfile <- "/Users/liz/COPDOmics/filesForIntLim/HILICinputData.csv"
inputData <- IntLIM::ReadData(inputFile = csvfile,metabid='id',geneid='id')
result_IntLIM <- RunIntLim(inputData = inputData,stype="FEV1FEC", continuous = TRUE, covar=c("PC1", "PC2"), class.covar=c("numeric","numeric"))
margins1 = MarginalEffectsGraph(inputResults = result_IntLIM, inputData = inputData, geneOfInterest="117_at", metaboliteOfInterest="Indoxyl")
build()
install()
margins1 = MarginalEffectsGraph(inputResults = result_IntLIM, inputData = inputData, geneOfInterest="117_at", metaboliteOfInterest="Indoxyl")
inputResults = result_IntLIM
inputData = inputData
geneOfInterest="117_at"
metaboliteOfInterest="Indoxyl"
forglm  = data.frame(row.names = 1:length(gene_data))
forglm$g = gene_data
forglm$type = as.numeric(as.character(pheno))
forglm$Y = as.numeric(metab_data)
covariates = as.character(inputResults@covar$covariate)
covariates_class = as.character(inputResults@covar$class.var)
#get dataframes
incommon <- getCommon(inputData,inputResults@stype,covar=covariates,class.covar=covariates_class)
pheno <- incommon$p
gene <- incommon$gene
metab <- incommon$metab
#get one gene an metabolite
gene_data = gene[geneOfInterest,]
metab_data = metab[metaboliteOfInterest,]
getCommon <- function(inputData,stype=NULL, covar = NULL, class.covar = NULL) {
incommon<-MultiDataSet::commonSamples(inputData)
mp <- Biobase::pData(incommon[["metabolite"]])
gp <- Biobase::pData(incommon[["expression"]])
if(all.equal(mp[,stype],gp[,stype])[1] != TRUE) {
stop(paste("The column", stype,"for the samples in common between the metabolite and gene datasets are not equal.  Please check your input."))
}
gene <- Biobase::assayDataElement(inputData[["expression"]], 'exprs')
metab <- Biobase::assayDataElement(inputData[["metabolite"]], 'metabData')
# Force the order to be the same, in case it isn't
p <- mp[rownames(gp),]
p.0 <- p
metab <- metab[,colnames(gene)]
if(!is.null(stype)) {
p <- p[,stype]
uniqp <- unique(p)
uniqtypes <- unique(p)
# Deal with missing values or ""
if(length(which(p==""))>0) {
new.p <- p[which(p!="")]
metab <- metab[,which(p!="")]
gene <- gene[,which(p!="")]
p <- new.p
}
if(length(which(is.na(p)))>0) {
new.p <- p[which(!is.na(p))]
metab <- metab[,which(!is.na(p))]
gene <- gene[,which(!is.na(p))]
p <- new.p
}
}
if(!is.null(covar)){
if (length(covar %in% colnames(p.0)) != sum(covar %in% colnames(p.0))){
stop("Additional variable names not in pData")
}
covar_matrix <- p.0[colnames(gene),covar, drop = FALSE]
na.covar <- which(is.na(covar_matrix) | covar_matrix == '',arr.ind = TRUE)
na.covar.list <- unique(rownames(na.covar))
new.overall.list <- setdiff(colnames(gene), na.covar.list)
covar_matrix <- covar_matrix[new.overall.list,,drop = FALSE]
class.var <- apply(covar_matrix,2,class)
gene <- gene[,new.overall.list]
metab <- metab[,new.overall.list]
p <- p.0[new.overall.list,stype]
if(!(is.null(class.covar))){
if(length(class.covar) != length(covar)){
stop("lengths of covar and class.covar not the same")
}
len.covar <- length(covar)
for(i in 1:len.covar){
if(class.covar[i] == 'numeric'){
covar_matrix[,i] <- as.numeric(covar_matrix[,i])
}else{
covar_matrix[,i] <- as.factor(as.character(covar_matrix[,i]))
}
}
}
}else{
covar_matrix <- NULL
}
# Check that everything is in right order
if(!all.equal(rownames(mp),rownames(gp)) || !all.equal(colnames(metab),colnames(gene))){
stop("Something went wrong with the merging!  Sample names of input files may not match.")
} else {
out <- list(p=as.factor(as.character(p)),gene=gene,metab=metab, covar_matrix=covar_matrix)
}
return(out)
}
covariates = as.character(inputResults@covar$covariate)
covariates_class = as.character(inputResults@covar$class.var)
#get dataframes
incommon <- getCommon(inputData,inputResults@stype,covar=covariates,class.covar=covariates_class)
pheno <- incommon$p
gene <- incommon$gene
metab <- incommon$metab
#get one gene an metabolite
gene_data = gene[geneOfInterest,]
metab_data = metab[metaboliteOfInterest,]
forglm  = data.frame(row.names = 1:length(gene_data))
forglm$g = gene_data
forglm$type = as.numeric(as.character(pheno))
forglm$Y = as.numeric(metab_data)
forglm
document()
build()
install()
margins1 = MarginalEffectsGraph(inputResults = result_IntLIM, inputData = inputData, geneOfInterest="117_at", metaboliteOfInterest="Indoxyl")
csvfile <- "/Users/liz/COPDOmics/filesForIntLim/HILICinputData.csv"
inputData <- IntLIM::ReadData(inputFile = csvfile,metabid='id',geneid='id')
result_IntLIM <- RunIntLim(inputData = inputData,stype="FEV1FEC", continuous = TRUE, covar=c("PC1", "PC2"), class.covar=c("numeric","numeric"))
margins1 = MarginalEffectsGraph(inputResults = result_IntLIM, inputData = inputData, geneOfInterest="117_at", metaboliteOfInterest="Indoxyl")
document()
build()
install()
margins1 = MarginalEffectsGraph(inputResults = result_IntLIM, inputData = inputData, geneOfInterest="117_at", metaboliteOfInterest="Indoxyl")
document()
build()
install()
margins1 = MarginalEffectsGraph(inputResults = result_IntLIM, inputData = inputData, geneOfInterest="117_at", metaboliteOfInterest="Indoxyl")
document()
document()
build()
install()
margins1 = MarginalEffectsGraphDataframe(inputResults = result_IntLIM, inputData = inputData, geneOfInterest="117_at", metaboliteOfInterest="Indoxyl")
margins1
MarginalEffectsGraph(margins1)
colnames(dataframe)[3:ncol(dataframe)]
dataframe = margins1
colnames(dataframe)[3:ncol(dataframe)]
colnames(dataframe)[4:ncol(dataframe)]
for(i in length(covariates)){
form <- paste(form, '+', covariates[i])
}
covariates = colnames(dataframe)[4:ncol(dataframe)]
#Add all covariates to formula for glm()
for(i in length(covariates)){
form <- paste(form, '+', covariates[i])
}
form = "Y ~ g + type + g:type"
if (ncol(dataframe) > 3) {
covariates = colnames(dataframe)[4:ncol(dataframe)]
#Add all covariates to formula for glm()
for(i in length(covariates)){
form <- paste(form, '+', covariates[i])
}
}
form
form = "Y ~ g + type + g:type"
if (ncol(dataframe) > 3) {
covariates = colnames(dataframe)[4:ncol(dataframe)]
#Add all covariates to formula for glm()
for(i in 1:length(covariates)){
form <- paste(form, '+', covariates[i])
}
}
form
document
document()
build()
install()
MarginalEffectsGraph(dataframe = margins1)
csvfile <- "/Users/liz/COPDOmics/filesForIntLim/HILICinputData.csv"
inputData <- IntLIM::ReadData(inputFile = csvfile,metabid='id',geneid='id')
result_IntLIM <- RunIntLim(inputData = inputData,stype="FEV1FEC", continuous = TRUE, covar=c("PC1", "PC2"), class.covar=c("numeric","numeric"))
margins1 = MarginalEffectsGraphDataframe(inputResults = result_IntLIM, inputData = inputData, geneOfInterest="117_at", metaboliteOfInterest="Indoxyl")
MarginalEffectsGraph(dataframe = margins1)
getwd()
setwd("/Users/liz/COPDOmics")
margins1 = MarginalEffectsGraphDataframe(inputResults = result_IntLIM, inputData = inputData, geneOfInterest="117_at", metaboliteOfInterest="Indoxyl")
MarginalEffectsGraph(dataframe = margins1)
document()
build()
install()
setwd("/Users/liz/COPDOmics")
margins1 = MarginalEffectsGraphDataframe(inputResults = result_IntLIM, inputData = inputData, geneOfInterest="117_at", metaboliteOfInterest="Indoxyl")
MarginalEffectsGraph(dataframe = margins1)
model = glm(formula = form)
form = "Y ~ g + type + g:type"
if (ncol(dataframe) > 3) {
covariates = colnames(dataframe)[4:ncol(dataframe)]
#Add all covariates to formula for glm()
for(i in 1:length(covariates)){
form <- paste(form, '+', covariates[i])
}
}
document()
build()
install()
setwd("/Users/liz/COPDOmics")
margins1 = MarginalEffectsGraphDataframe(inputResults = result_IntLIM, inputData = inputData, geneOfInterest="117_at", metaboliteOfInterest="Indoxyl")
MarginalEffectsGraph(dataframe = margins1)
setwd(/Users/liz/Documents/biomedicalInformatics/IntLM/IntLIM)
setwd("/Users/liz/Documents/biomedicalInformatics/IntLM/IntLIM")
document()
build()
install()
setwd("/Users/liz/COPDOmics")
margins1 = MarginalEffectsGraphDataframe(inputResults = result_IntLIM, inputData = inputData, geneOfInterest="117_at", metaboliteOfInterest="Indoxyl")
MarginalEffectsGraph(dataframe = margins1)
dataframe = margins1
form = "Y ~ g + type + g:type"
if (ncol(dataframe) > 3) {
covariates = colnames(dataframe)[4:ncol(dataframe)]
#Add all covariates to formula for glm()
for(i in 1:length(covariates)){
form <- paste(form, '+', covariates[i])
}
}
attach(dataframe)
model = glm(formula = form)
p = list(type=seq(min(dataframe$type),max(dataframe$type),by=0.1))
margins_output=margins(model,at=p)
cplot(model, "type", what = "prediction", main = "Marginal effects")
return_value = list(model, margins_output)
names(return_value) = c("model", "margins")
margins_output
cplot(model, "type", what = "prediction", main = "Marginal effects")
model
build()
setwd("/Users/liz/Documents/biomedicalInformatics/IntLM/IntLIM")
document()
document()
build()
install()
MarginalEffectsGraph(dataframe = margins1)
csvfile <- "/Users/liz/COPDOmics/filesForIntLim/HILICinputData.csv"
inputData <- IntLIM::ReadData(inputFile = csvfile,metabid='id',geneid='id')
IntLIM::PlotDistributions(inputData = inputData)
margins1 = MarginalEffectsGraphDataframe(inputResults = result_IntLIM, inputData = inputData, geneOfInterest="117_at", metaboliteOfInterest="Indoxyl")
result_IntLIM <- RunIntLim(inputData = inputData,stype="FEV1FEC", continuous = TRUE, covar=c("PC1", "PC2"), class.covar=c("numeric","numeric"))
margins1 = MarginalEffectsGraphDataframe(inputResults = result_IntLIM, inputData = inputData, geneOfInterest="117_at", metaboliteOfInterest="Indoxyl")
MarginalEffectsGraph(dataframe = margins1)
setwd("/Users/liz/COPDOmics")
margins1 = MarginalEffectsGraphDataframe(inputResults = result_IntLIM, inputData = inputData, geneOfInterest="117_at", metaboliteOfInterest="Indoxyl")
MarginalEffectsGraph(dataframe = margins1)
library()
library("IntLIM")
MarginalEffectsGraph(dataframe = margins1)
result_Rfunction = getCoeffUsingBuiltInLM_Continuous(gene_directread,
metabo_directread,
phenotype_directread,
gene_of_interest = "117_at",
metabolite_of_interest = "Indoxyl",
PC1 = mpca$x[,1],
PC2 = mpca$x[,2])
setwd("/Users/liz/COPDOmics")
samples = createCSVForIntLIMGenesMetabolites(subset = TRUE, metabolite_file_name="COPD131HILICPosCompoundAbundance.xlsx", output_file_prefix = "HILIC")
gene_directread = read.csv("filesForIntLim/HILICgenes.csv", header=FALSE)
phenotype_directread = read.csv("filesForIntLim/HILICFEV1FEC.csv")
metabo_directread = read.csv("filesForIntLim/HILICmetabolites.csv", header=FALSE, colClasses = "character")
result_Rfunction = getCoeffUsingBuiltInLM_Continuous(gene_directread,
metabo_directread,
phenotype_directread,
gene_of_interest = "117_at",
metabolite_of_interest = "Indoxyl",
PC1 = mpca$x[,1],
PC2 = mpca$x[,2])
setwd("/Users/liz/COPDOmics")
metabolite = reformatCSVReadinMetabolite(metabo_directread)
batch_path = "Files/LCMSMetabolomicsUntargeted/COPD_MS_Batch_Info.xlsx"
batch_tibble <- read_excel(batch_path, col_names=as.character(c(1:2)))
batch_dataframe = convertToDataFrame(batch_tibble)
metabolite_label_vector = createLabelVector(batch_dataframe, metabolite)
metabolite_color_vector = createColorVector(metabolite_label_vector)
mpca = computePCA(metabolite)
createCSVForIntLIMPhenotype(output_file_prefix = "HILIC", pca = mpca, samples = samples)
result_Rfunction = getCoeffUsingBuiltInLM_Continuous(gene_directread,
metabo_directread,
phenotype_directread,
gene_of_interest = "117_at",
metabolite_of_interest = "Indoxyl",
PC1 = mpca$x[,1],
PC2 = mpca$x[,2])
inputData <- IntLIM::ReadData(inputFile = csvfile,metabid='id',geneid='id')
IntLIM::PlotDistributions(inputData = inputData)
csvfile <- "/Users/liz/COPDOmics/filesForIntLim/HILICinputData.csv"
inputData <- IntLIM::ReadData(inputFile = csvfile,metabid='id',geneid='id')
result_IntLIM <- RunIntLim(inputData = inputData,stype="FEV1FEC", continuous = TRUE, covar=c("PC1", "PC2"), class.covar=c("numeric","numeric"))
result_IntLIM <- IntLIM::RunIntLim(inputData = inputData,stype="FEV1FEC", continuous = TRUE, covar=c("PC1", "PC2"), class.covar=c("numeric","numeric"))
margins1 =IntLIM:: MarginalEffectsGraphDataframe(inputResults = result_IntLIM, inputData = inputData, geneOfInterest="117_at", metaboliteOfInterest="Indoxyl")
IntLIM::MarginalEffectsGraph(dataframe = margins1)
library("margins")
IntLIM::MarginalEffectsGraph(dataframe = margins1)
attach(dataframe)
IntLIM::MarginalEffectsGraph(dataframe = margins1)
document()
library("devtools")
document()
build()
install()
